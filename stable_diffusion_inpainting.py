# -*- coding: utf-8 -*-
"""Stable Diffusion Inpainting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ip917TqZgTSy_J1yFm8GTa1mtCv1TSSf

# Inpainting using Stable Diffusion

Examples of applications:

* Remove objects or imperfections in images
* Repair damaged or missing frames.
* Improve the quality of medical images
* ([Other examples](https://www.google.com/search?q=inpainting+examples&sxsrf=APwXEdcmKQjdKjNqZG7LSGdZmk_B3Wf27g:1683903400360&source=lnms&tbm=isch&sa=X&ved=2ahUKEwicuI6AhfD-AhW4qZUCHS1aAWsQ_AUoAXoECAEQAw&biw=1920&bih=880&dpr=1))

## Installing the libraries
"""

!pip install fastapi
!pip install python-multipart
!pip install uvicorn
!pip install typing-extensions
!pip install torch
!pip install kaleido
!pip install diffusers
!pip install accelerate transformers ftfy bitsandbytes gradio natsort safetensors xformers
!pip install transformers

"""## Loading the model

- More information about the model: https://huggingface.co/runwayml/stable-diffusion-inpainting
"""

import numpy as np
import torch
import PIL
from PIL import Image
import requests
import torch
from io import BytesIO

from diffusers import StableDiffusionInpaintPipeline

pipeline = StableDiffusionInpaintPipeline.from_pretrained(
    "runwayml/stable-diffusion-inpainting",
    torch_dtype=torch.float16,
    use_safetensors=True,
    variant="fp16",
)
pipe = pipeline.to("cuda")

pipe.enable_attention_slicing()
pipe.enable_xformers_memory_efficient_attention()

# from diffusers import StableDiffusionInpaintPipeline
# inpainting_model = "runwayml/stable-diffusion-inpainting"
# device = "cuda"
# pipe = StableDiffusionInpaintPipeline.from_pretrained(inpainting_model, torch_dtype=torch.float16).to(device)

from diffusers import StableDiffusionInpaintPipeline
inpainting_model = "runwayml/stable-diffusion-inpainting"
device = "cuda"
pipe = StableDiffusionInpaintPipeline.from_pretrained(inpainting_model, torch_dtype=torch.float16).to(device)

pipe.enable_attention_slicing()
pipe.enable_xformers_memory_efficient_attention()

def grid_img(imgs, rows=1, cols=3, scale=1):
  assert len(imgs) == rows * cols

  w, h = imgs[0].size
  w, h = int(w*scale), int(h*scale)

  grid = Image.new('RGB', size=(cols*w, rows*h))
  grid_w, grid_h = grid.size

  for i, img in enumerate(imgs):
      img = img.resize((w,h), Image.ANTIALIAS)
      grid.paste(img, box=(i%cols*w, i//cols*h))
  return grid

"""## Loading the image

- Image source: https://unsplash.com/pt-br/fotografias/5sI6fQgYIuo

"""

img_path = '/content/ufam_1.jpg'
img = Image.open(img_path)
img

img.size

"""## Loading the mask"""

mask_path = '/content/ufam_1_mask.png'
img_mask = Image.open(mask_path)
img_mask

img_mask.size

seed = 777

"""## Creating the prompt"""

prompt = "motorcycle"

generator = torch.Generator(device='cuda').manual_seed(777)
w, h = img.size[0], img.size[1]
result_img = pipe(
    prompt = prompt,
    image = img,
    mask_image = img_mask,
    width=w,
    height=h,
    generator=generator).images[0]

result_img

"""## Exchanging the objects"""

prompt = "a woman"

generator = torch.Generator(device='cuda').manual_seed(seed)
w, h = img.size[0], img.size[1]
result_img = pipe(
    prompt = prompt,
    image = img,
    mask_image = img_mask,
    width=w,
    height=h,
    generator=generator).images[0]

result_img

prompt = "a bonsai tree"

generator = torch.Generator(device="cuda").manual_seed(seed)

result_img3 = pipe(
    prompt=prompt,
    image=img,
    mask_image=img_mask,
    generator=generator).images[0]

result_img3

"""## Comparing the results"""

imgs = [img, result_img, result_img2, result_img3]
grid_img(imgs, rows=1, cols=len(imgs), scale=0.75)

"""### Other image

- Image source: https://www.freepik.com/free-photo/attractive-young-woman-walking-autumn-wearing-jacket-using-phone_27289740.htm


"""

img_path = "/content/ufam_3.png"
mask_path = "/content/ufam_3_mask.png"

img = Image.open(img_path)
img_mask = Image.open(mask_path)

grid_img([img, img_mask], rows=1, cols=2, scale=0.75)

img.size

w, h = img.size[0], img.size[1]
print(w, h)

prompt = ""

generator = torch.Generator(device='cuda').manual_seed(777)
result_img4 = pipe(
    prompt = prompt,
    image = img,
    mask_image = img_mask,
    width=w,
    height=h,
    generator=generator).images[0]
result_img

"""### Generating multiple images

"""

prompt = "a robot sitting on a bench"
num_imgs = 3

generator = torch.Generator(device="cuda").manual_seed(seed)

imgs = pipe(
    prompt=prompt,
    image=img,
    mask_image=img_mask,
    width=w,
    height=h,
    num_images_per_prompt=num_imgs,
    generator=generator).images

grid_img(imgs, rows=1, cols=len(imgs), scale=0.75)

"""## Other examples

- Image source: https://unsplash.com/pt-br/fotografias/_K0sTUUHQDE
"""

img_path = "/content/toa-heftiba-_K0sTUUHQDE-unsplash.jpg"
mask_path = "/content/toa-heftiba-_K0sTUUHQDE-unsplash.jpg"

img = Image.open(img_path)
img_mask = Image.open(mask_path)
img.size
w, h = img.size[0], img.size[1]
print(w, h)

grid_img([img, img_mask], rows=1, cols=2, scale=0.75)

prompt = "desert"

generator = torch.Generator(device="cuda").manual_seed(seed)

result_img = pipe(
    prompt=prompt,
    image=img,
    mask_image=img_mask,
    width=w,
    height=h,
    generator=generator).images[0]

result_img

prompt = "a dragon in the desert"

generator = torch.Generator(device="cuda").manual_seed(seed)

result_img = pipe(
    prompt=prompt,
    image=img,
    mask_image=img_mask,
    width=w,
    height=h,
    generator=generator).images[0]

result_img

prompt = ["an android walking in the desert",
          "a lighthouse in the desert",
          "a tree in the desert"]

guidance_scale = 6.5
num_samples = 1
generator = torch.Generator(device="cuda").manual_seed(seed)

imgs = pipe(
    prompt=prompt,
    image=img,
    mask_image=img_mask,
    guidance_scale=guidance_scale,
    width=w,
    height=h,
    generator=generator,
    num_images_per_prompt=num_samples,
).images

grid_img(imgs, rows=1, cols=len(imgs), scale=0.75)

"""* Other inpainting models: https://huggingface.co/models?library=diffusers&sort=downloads&search=inpainting

"""